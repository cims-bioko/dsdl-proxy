#!/bin/bash

##
# This script fetches the cache files from an openhds server. It was written to
# test the difference in performance of syncing to tablets when the content is
# served locally.
##

# Exit immediately if any command fails
set -o errexit

# OpenHDS URLs
ROOT_URI=http://cims-bioko.org:8080/openhds
LOGIN_URI=$ROOT_URI/loginProcess
REST_BASE=$ROOT_URI/api/rest
REST_EPS=(fieldworkers visits/cached individuals/cached relationships/cached \
 memberships/cached socialgroups/cached locationhierarchies locations/cached)

# Stores session cookie so form-based login persists across requests
COOKIE_FILE=.cookies.txt

# Variables to accumulate options for login/fetch commands, respectively
HTTP_OPTS=("-q")
LOGIN_OPTS=("-O" "/dev/null" "--save-cookies=$COOKIE_FILE" "--keep-session-cookies")
FETCH_OPTS=("-x" "-nH")

# Toggles whether to ask for gzip compressed content (set to any value to enable)
COMPRESS=true

# Command to use for http operations
HTTP_CMD=wget

# This value matches wget's no-host-dir save option's behavior
CONTENT_DIR="${ROOT_URI##*/}"


##
# Performs HTTP authentication via form login
# Takes no arguments and saves response cookies to the location specified by COOKIES_FILE
##
function auth() {
  echo
  echo -n "logging in as $USER..."
  "$HTTP_CMD" "${HTTP_OPTS[@]}" "${LOGIN_OPTS[@]}" "$LOGIN_URI"
  echo done
}


##
# Performs an HTTP GET, saving the response at the path after host/port.
# Specified as: "http://<REST base URL>" "<endpoint subpath>"
#
# For example:
#
#   fetch http://example.com:8080/a/b/c endpoint/path.ext
#
# Downloads the entire contents of http://example.com:8080/a/b/c/endpoint/path.ext to
# ./a/b/c/endpoint/path.ext
##
function fetch() {
  base=$1
  endpoint=$2
  epuri="$base/$endpoint"
  echo -n "fetching $endpoint..."
  "$HTTP_CMD" "${HTTP_OPTS[@]}" "${FETCH_OPTS[@]}" "${epuri}"
  echo done
}


# Add header to tell HTTP server to send gzipped content
if [[ ! -z "$COMPRESS" ]]; then
  FETCH_OPTS+=("--header=Accept-Encoding: gzip" "--header=Accept: application/xml")
fi


# Prompt for openhds username
echo -n "username: "
read USER


# If username wasn't provided, assume no login required and skip password prompt and authenticating
if [[ ! -z "$USER" ]]; then

  # Prompt for the user's password
  echo -n "password: "
  stty -echo
  read PASS
  stty echo

  # Configure the login and fetch commands to use authentication
  LOGIN_OPTS+=("--post-data=j_username=$USER&j_password=$PASS")
  FETCH_OPTS+=("--load-cookies=$COOKIE_FILE")

  # Perform the actual authentication
  auth
fi


# Cleanup the existing content directory before download attempt
if [[ -d "$CONTENT_DIR" ]]; then
  echo "removing content directory '$CONTENT_DIR'"
  rm -rf "$CONTENT_DIR"
fi


# Attempt to download from all of the REST endpoints
echo "downloading from $ROOT_URI"
for ep in ${REST_EPS[*]}
do
  fetch "$REST_BASE" "${ep}"
done

# Decompress content if the option was specified
if [[ ! -z "$COMPRESS" ]]; then
  for file in $(find $CONTENT_DIR -type f ! -name '*.tmp')
  do
    echo "decompressing $file"
    gunzip < "$file" > "${file}.tmp" 
    mv "${file}.tmp" "$file"
  done
fi
